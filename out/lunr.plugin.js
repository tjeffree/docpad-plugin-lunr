// Generated by CoffeeScript 1.6.3
(function() {
  var lunrdoc,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  lunrdoc = require('./lunrdoc');

  module.exports = function(BasePlugin) {
    var LunrPlugin, _ref;
    return LunrPlugin = (function(_super) {
      __extends(LunrPlugin, _super);

      function LunrPlugin() {
        _ref = LunrPlugin.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      LunrPlugin.prototype.name = 'lunr';

      LunrPlugin.prototype.extendTemplateData = function(_arg) {
        var templateData;
        templateData = _arg.templateData;
        lunrdoc.init(this.docpad);
        templateData.getLunrSearchPage = function(index, placeholder) {
          return lunrdoc.getLunrSearchPage(index, placeholder);
        };
        return templateData.getLunrSearchBlock = function(searchPage, placeholder, submit) {
          return lunrdoc.getLunrSearchBlock(searchPage, placeholder, submit);
        };
      };

      LunrPlugin.prototype.writeAfter = function() {
        var colIndex, collection, index, indexCollection, indexName, _ref1, _ref2;
        if (this.config.indexes) {
          _ref1 = this.config.indexes;
          for (indexName in _ref1) {
            index = _ref1[indexName];
            if (typeof index.collection === 'String') {
              index.collection = [index.collection];
            }
            _ref2 = index.collection;
            for (collection in _ref2) {
              colIndex = _ref2[collection];
              indexCollection = this.docpad.getCollection(colIndex);
              if (indexCollection) {
                indexCollection.forEach(function(document) {
                  return lunrdoc.index(indexName, document);
                });
              }
            }
          }
          return lunrdoc.save();
        }
      };

      return LunrPlugin;

    })(BasePlugin);
  };

}).call(this);
